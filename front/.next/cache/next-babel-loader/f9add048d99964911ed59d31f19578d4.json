{"ast":null,"code":"import produce from 'immer';\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePosts: true,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n}); // 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성은 지키면서)\n\nconst reducer = (state = initialState, action) => produce(state, draft => {\n  switch (action.type) {\n    case LOAD_POSTS_REQUEST:\n      draft.loadPostsLoading = true;\n      draft.loadPostsDone = false;\n      draft.loadPostsError = null;\n      break;\n\n    case LOAD_POSTS_SUCCESS:\n      draft.loadPostsLoading = false;\n      draft.loadPostsDone = true;\n      draft.mainPosts = draft.mainPosts.concat(action.data);\n      draft.hasMorePosts = draft.mainPosts.length < 50;\n      break;\n\n    case LOAD_POSTS_FAILURE:\n      draft.loadPostsLoading = false;\n      draft.loadPostsError = action.error;\n      break;\n\n    case ADD_POST_REQUEST:\n      draft.addPostLoading = true;\n      draft.addPostDone = false;\n      draft.addPostError = null;\n      break;\n\n    case ADD_POST_SUCCESS:\n      draft.addPostLoading = false;\n      draft.addPostDone = true;\n      draft.mainPosts.unshift(action.data);\n      break;\n\n    case ADD_POST_FAILURE:\n      draft.addPostLoading = false;\n      draft.addPostError = action.error;\n      break;\n\n    case REMOVE_POST_REQUEST:\n      draft.removePostLoading = true;\n      draft.removePostDone = false;\n      draft.removePostError = null;\n      break;\n\n    case REMOVE_POST_SUCCESS:\n      draft.removePostLoading = false;\n      draft.removePostDone = true;\n      draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data);\n      break;\n\n    case REMOVE_POST_FAILURE:\n      draft.removePostLoading = false;\n      draft.removePostError = action.error;\n      break;\n\n    case ADD_COMMENT_REQUEST:\n      draft.addCommentLoading = true;\n      draft.addCommentDone = false;\n      draft.addCommentError = null;\n      break;\n\n    case ADD_COMMENT_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.Comments.unshift(action.data);\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        break;\n      }\n\n    case ADD_COMMENT_FAILURE:\n      draft.addCommentLoading = false;\n      draft.addCommentError = action.error;\n      break;\n\n    default:\n      break;\n  }\n});\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/Sang/react-nodebird/front/reducers/post.js"],"names":["produce","initialState","mainPosts","imagePaths","hasMorePosts","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","LIKE_POST_REQUEST","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","reducer","state","action","draft","concat","length","error","unshift","filter","v","id","post","find","PostId","Comments"],"mappings":"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","sourcesContent":["import produce from 'immer';\r\n\r\nexport const initialState = {\r\n  mainPosts: [],\r\n  imagePaths: [],\r\n  hasMorePosts: true,\r\n  loadPostsLoading: false,\r\n  loadPostsDone: false,\r\n  loadPostsError: null,\r\n  addPostLoading: false,\r\n  addPostDone: false,\r\n  addPostError: null,\r\n  removePostLoading: false,\r\n  removePostDone: false,\r\n  removePostError: null,\r\n  addCommentLoading: false,\r\n  addCommentDone: false,\r\n  addCommentError: null,\r\n};\r\n\r\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST'\r\n\r\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\r\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\r\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const addPost = (data) => ({\r\n  type: ADD_POST_REQUEST,\r\n  data,\r\n});\r\n\r\nexport const addComment = (data) => ({\r\n  type: ADD_COMMENT_REQUEST,\r\n  data,\r\n});\r\n\r\n// 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성은 지키면서)\r\nconst reducer = (state = initialState, action) => produce(state, (draft) => {\r\n  switch (action.type) {\r\n    case LOAD_POSTS_REQUEST:\r\n      draft.loadPostsLoading = true;\r\n      draft.loadPostsDone = false;\r\n      draft.loadPostsError = null;\r\n      break;\r\n    case LOAD_POSTS_SUCCESS:\r\n      draft.loadPostsLoading = false;\r\n      draft.loadPostsDone = true;\r\n      draft.mainPosts = draft.mainPosts.concat(action.data);\r\n      draft.hasMorePosts = draft.mainPosts.length < 50;\r\n      break;\r\n    case LOAD_POSTS_FAILURE:\r\n      draft.loadPostsLoading = false;\r\n      draft.loadPostsError = action.error;\r\n      break;\r\n    case ADD_POST_REQUEST:\r\n      draft.addPostLoading = true;\r\n      draft.addPostDone = false;\r\n      draft.addPostError = null;\r\n      break;\r\n    case ADD_POST_SUCCESS:\r\n      draft.addPostLoading = false;\r\n      draft.addPostDone = true;\r\n      draft.mainPosts.unshift(action.data);\r\n      break;\r\n    case ADD_POST_FAILURE:\r\n      draft.addPostLoading = false;\r\n      draft.addPostError = action.error;\r\n      break;\r\n    case REMOVE_POST_REQUEST:\r\n      draft.removePostLoading = true;\r\n      draft.removePostDone = false;\r\n      draft.removePostError = null;\r\n      break;\r\n    case REMOVE_POST_SUCCESS:\r\n      draft.removePostLoading = false;\r\n      draft.removePostDone = true;\r\n      draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\r\n      break;\r\n    case REMOVE_POST_FAILURE:\r\n      draft.removePostLoading = false;\r\n      draft.removePostError = action.error;\r\n      break;\r\n    case ADD_COMMENT_REQUEST:\r\n      draft.addCommentLoading = true;\r\n      draft.addCommentDone = false;\r\n      draft.addCommentError = null;\r\n      break;\r\n    case ADD_COMMENT_SUCCESS: {\r\n      const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n      post.Comments.unshift(action.data);\r\n      draft.addCommentLoading = false;\r\n      draft.addCommentDone = true;\r\n      break;\r\n    }\r\n    case ADD_COMMENT_FAILURE:\r\n      draft.addCommentLoading = false;\r\n      draft.addCommentError = action.error;\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n});\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}
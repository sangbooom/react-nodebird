{"ast":null,"code":"import React, { useCallback, useEffect, useRef } from 'react';\nimport { Button, Form, Input } from 'antd';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ADD_POST_REQUEST, UPLOAD_IMAGES_REQUEST, REMOVE_IMAGE } from '../reducers/post';\nimport useInput from '../hooks/useInput';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst PostForm = () => {\n  const {\n    imagePaths,\n    addPostDone\n  } = useSelector(state => state.post);\n  const dispatch = useDispatch();\n  const [text, onChangeText, setText] = useInput('');\n  useEffect(() => {\n    if (addPostDone) {\n      setText('');\n    }\n  }, [addPostDone]);\n  const onSubmit = useCallback(() => {\n    if (!text || !text.trim()) {\n      return alert('게시글을 작성하세요.');\n    }\n\n    const formData = new FormData();\n    imagePaths.forEach(p => {\n      formData.append('image', p);\n    });\n    formData.append('content', text);\n    return dispatch({\n      type: ADD_POST_REQUEST,\n      data: formData\n    });\n  }, [text, imagePaths]);\n  const imageInput = useRef();\n  const onClickImageUpload = useCallback(() => {\n    imageInput.current.click();\n  }, [imageInput.current]);\n  const onChangeImages = useCallback(e => {\n    console.log('images', e.target.files);\n    const imageFormData = new FormData();\n    [].forEach.call(e.target.files, f => {\n      imageFormData.append('image', f);\n    });\n    dispatch({\n      type: UPLOAD_IMAGES_REQUEST,\n      data: imageFormData\n    });\n  }, []);\n  const onRemoveImage = useCallback(index => () => {\n    dispatch({\n      type: REMOVE_IMAGE,\n      data: index\n    });\n  }, []);\n  return /*#__PURE__*/_jsxs(Form, {\n    style: {\n      margin: '10px 0 20px'\n    },\n    encType: \"multipart/form-data\",\n    onFinish: onSubmit,\n    children: [/*#__PURE__*/_jsx(Input.TextArea, {\n      value: text,\n      onChange: onChangeText,\n      maxLength: 140,\n      placeholder: \"\\uC5B4\\uB5A4 \\uC2E0\\uAE30\\uD55C \\uC77C\\uC774 \\uC788\\uC5C8\\uB098\\uC694?\"\n    }), /*#__PURE__*/_jsxs(\"div\", {\n      children: [/*#__PURE__*/_jsx(\"input\", {\n        type: \"file\",\n        name: \"image\",\n        multiple: true,\n        hidden: true,\n        ref: imageInput,\n        onChange: onChangeImages\n      }), /*#__PURE__*/_jsx(Button, {\n        onClick: onClickImageUpload,\n        children: \"\\uC774\\uBBF8\\uC9C0 \\uC5C5\\uB85C\\uB4DC\"\n      }), /*#__PURE__*/_jsx(Button, {\n        type: \"primary\",\n        style: {\n          float: 'right'\n        },\n        htmlType: \"submit\",\n        children: \"\\uC9F9\\uC9F9\"\n      })]\n    }), /*#__PURE__*/_jsx(\"div\", {\n      children: imagePaths.map((v, i) => /*#__PURE__*/_jsxs(\"div\", {\n        style: {\n          display: 'inline-block'\n        },\n        children: [/*#__PURE__*/_jsx(\"img\", {\n          src: `http://localhost:3065/${v}`,\n          style: {\n            width: '200px'\n          },\n          alt: v\n        }), /*#__PURE__*/_jsx(\"div\", {\n          children: /*#__PURE__*/_jsx(Button, {\n            onClick: onRemoveImage(i),\n            children: \"\\uC81C\\uAC70\"\n          })\n        })]\n      }, v))\n    })]\n  });\n};\n\nexport default PostForm;","map":{"version":3,"sources":["C:/Users/Sang/react-nodebird/front/components/PostForm.js"],"names":["React","useCallback","useEffect","useRef","Button","Form","Input","useDispatch","useSelector","ADD_POST_REQUEST","UPLOAD_IMAGES_REQUEST","REMOVE_IMAGE","useInput","PostForm","imagePaths","addPostDone","state","post","dispatch","text","onChangeText","setText","onSubmit","trim","alert","formData","FormData","forEach","p","append","type","data","imageInput","onClickImageUpload","current","click","onChangeImages","e","console","log","target","files","imageFormData","call","f","onRemoveImage","index","margin","float","map","v","i","display","width"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useRef } from 'react';\nimport { Button, Form, Input } from 'antd';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { ADD_POST_REQUEST, UPLOAD_IMAGES_REQUEST, REMOVE_IMAGE } from '../reducers/post';\nimport useInput from '../hooks/useInput';\n\nconst PostForm = () => {\n  const { imagePaths, addPostDone } = useSelector((state) => state.post);\n  const dispatch = useDispatch();\n  const [text, onChangeText, setText] = useInput('');\n\n  useEffect(() => {\n    if (addPostDone) {\n      setText('');\n    }\n  }, [addPostDone]);\n\n  const onSubmit = useCallback(() => {\n    if (!text || !text.trim()) {\n      return alert('게시글을 작성하세요.');\n    }\n    const formData = new FormData();\n    imagePaths.forEach((p) => {\n      formData.append('image', p);\n    });\n    formData.append('content', text);\n    return dispatch({\n      type: ADD_POST_REQUEST,\n      data: formData,\n    });\n  }, [text, imagePaths]);\n\n  const imageInput = useRef();\n  const onClickImageUpload = useCallback(() => {\n    imageInput.current.click();\n  }, [imageInput.current]);\n\n  const onChangeImages = useCallback((e) => {\n    console.log('images', e.target.files);\n    const imageFormData = new FormData();\n    [].forEach.call(e.target.files, (f) => {\n      imageFormData.append('image', f);\n    });\n    dispatch({\n      type: UPLOAD_IMAGES_REQUEST,\n      data: imageFormData,\n    });\n  }, []);\n\n  const onRemoveImage = useCallback((index) => () => {\n    dispatch({\n      type: REMOVE_IMAGE,\n      data: index,\n    });\n  }, []);\n\n  return (\n    <Form style={{ margin: '10px 0 20px' }} encType=\"multipart/form-data\" onFinish={onSubmit}>\n      <Input.TextArea\n        value={text}\n        onChange={onChangeText}\n        maxLength={140}\n        placeholder=\"어떤 신기한 일이 있었나요?\"\n      />\n      <div>\n        <input type=\"file\" name=\"image\" multiple hidden ref={imageInput} onChange={onChangeImages} />\n        <Button onClick={onClickImageUpload}>이미지 업로드</Button>\n        <Button type=\"primary\" style={{ float: 'right' }} htmlType=\"submit\">짹짹</Button>\n      </div>\n      <div>\n        {imagePaths.map((v, i) => (\n          <div key={v} style={{ display: 'inline-block' }}>\n            <img src={`http://localhost:3065/${v}`} style={{ width: '200px' }} alt={v} />\n            <div>\n              <Button onClick={onRemoveImage(i)}>제거</Button>\n            </div>\n          </div>\n        ))}\n      </div>\n    </Form>\n  );\n};\n\nexport default PostForm;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import axios from \"axios\";\nimport { all, fork, put, takeLatest, throttle, call } from \"redux-saga/effects\";\nimport { LIKE_POST_SUCCESS, UNLIKE_POST_SUCCESS, ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\n\nfunction likePostAPI(data) {\n  return axios.patch(`/post/${data}/like`);\n}\n\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LIKE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction unlikePostAPI(data) {\n  return axios.delete(`/post/${data}/like`);\n}\n\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadPostsAPI(data) {\n  return axios.get(\"/posts\", data);\n}\n\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostsAPI, action.data);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post(\"/post\", {\n    content: data\n  });\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete(\"/post\", data);\n}\n\nfunction* removePost(action) {\n  try {\n    const result = yield call(removePostAPI, action.data);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchLikePost), fork(watchUnlikePost), fork(watchAddPost), fork(watchLoadPosts), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["C:/Users/Sang/react-nodebird/front/sagas/post.js"],"names":["axios","all","fork","put","takeLatest","throttle","call","LIKE_POST_SUCCESS","UNLIKE_POST_SUCCESS","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_OF_ME","likePostAPI","data","patch","likePost","action","result","type","err","console","error","LIKE_POST_FAILURE","response","unlikePostAPI","delete","unlikePost","UNLIKE_POST_FAILURE","loadPostsAPI","get","loadPosts","addPostAPI","post","content","addPost","id","shortId","generate","removePostAPI","removePost","addCommentAPI","postId","addComment","watchLikePost","LIKE_POST_REQUEST","watchUnlikePost","UNLIKE_POST_REQUEST","watchLoadPosts","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport { all, fork, put, takeLatest, throttle, call } from \"redux-saga/effects\";\r\n\r\nimport {\r\n  LIKE_POST_SUCCESS,\r\n  UNLIKE_POST_SUCCESS,\r\n  ADD_COMMENT_FAILURE,\r\n  ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS,\r\n  ADD_POST_FAILURE, \r\n  ADD_POST_REQUEST,\r\n  ADD_POST_SUCCESS,\r\n  LOAD_POSTS_FAILURE,\r\n  LOAD_POSTS_REQUEST,\r\n  LOAD_POSTS_SUCCESS,\r\n  REMOVE_POST_FAILURE,\r\n  REMOVE_POST_REQUEST,\r\n  REMOVE_POST_SUCCESS,\r\n} from \"../reducers/post\";\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\r\n\r\nfunction likePostAPI(data) {\r\n  return axios.patch(`/post/${data}/like`);\r\n}\r\n\r\nfunction* likePost(action) {\r\n  try {\r\n    const result = yield call(likePostAPI, action.data);\r\n    yield put({\r\n      type: LIKE_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: LIKE_POST_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction unlikePostAPI(data) {\r\n  return axios.delete(`/post/${data}/like`);\r\n}\r\n\r\nfunction* unlikePost(action) {\r\n  try {\r\n    const result = yield call(unlikePostAPI, action.data);\r\n    yield put({\r\n      type: UNLIKE_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: UNLIKE_POST_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\n\r\nfunction loadPostsAPI(data) {\r\n  return axios.get(\"/posts\", data);\r\n}\r\n\r\nfunction* loadPosts(action) {\r\n  try {\r\n    const result = yield call(loadPostsAPI, action.data);\r\n    yield put({\r\n      type: LOAD_POSTS_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: LOAD_POSTS_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction addPostAPI(data) {\r\n  return axios.post(\"/post\", { content: data });\r\n}\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    const result = yield call(addPostAPI, action.data);\r\n    const id = shortId.generate();\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n    yield put({\r\n      type: ADD_POST_TO_ME,\r\n      data: result.data.id,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n  return axios.delete(\"/post\", data);\r\n}\r\n\r\nfunction* removePost(action) {\r\n  try {\r\n    const result = yield call(removePostAPI, action.data);\r\n    yield put({\r\n      type: REMOVE_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n    yield put({\r\n      type: REMOVE_POST_OF_ME,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: REMOVE_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n  return axios.post(`/post/${data.postId}/comment`, data);\r\n}\r\n\r\nfunction* addComment(action) {\r\n  try {\r\n    const result = yield call(addCommentAPI, action.data);\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\nfunction* watchLikePost() {\r\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\r\n}\r\n\r\nfunction* watchUnlikePost() {\r\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\r\n}\r\n\r\nfunction* watchLoadPosts() {\r\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([\r\n    fork(watchLikePost),\r\n    fork(watchUnlikePost),\r\n    fork(watchAddPost),\r\n    fork(watchLoadPosts),\r\n    fork(watchRemovePost),\r\n    fork(watchAddComment),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import produce from 'immer';\nexport var initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePosts: true,\n  likePostLoading: false,\n  likePostDone: false,\n  likePostError: null,\n  unlikePostLoading: false,\n  unlikePostDone: false,\n  unlikePostError: null,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  uploadImagesLoading: false,\n  uploadImagesDone: false,\n  uploadImagesError: null,\n  retweetLoading: false,\n  retweetDone: false,\n  retweetError: null\n};\nexport var UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\nexport var UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\nexport var UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\nexport var LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\nexport var LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\nexport var LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\nexport var UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\nexport var UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\nexport var UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\nexport var LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport var LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport var LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\nexport var ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport var ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport var ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport var REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport var REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport var REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport var ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport var ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport var ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport var RETWEET_REQUEST = 'RETWEET_REQUEST';\nexport var RETWEET_SUCCESS = 'RETWEET_SUCCESS';\nexport var RETWEET_FAILURE = 'RETWEET_FAILURE';\nexport var REMOVE_IMAGE = 'REMOVE_IMAGE';\nexport var addPost = function addPost(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n};\nexport var addComment = function addComment(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  };\n};\nexport var generateDummyPost = function generateDummyPost(number) {\n  return Array(number).fill().map(function () {\n    return {\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: faker.name.findName()\n      },\n      content: faker.lorem.paragraph(),\n      Images: [{\n        src: faker.image.image()\n      }],\n      Comments: [{\n        User: {\n          id: shortId.generate(),\n          nickname: faker.name.findName()\n        },\n        content: faker.lorem.sentence()\n      }]\n    };\n  });\n}; // 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성은 지키면서)\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    switch (action.type) {\n      case RETWEET_REQUEST:\n        draft.retweetLoading = true;\n        draft.retweetDone = false;\n        draft.retweetError = null;\n        break;\n\n      case RETWEET_SUCCESS:\n        {\n          draft.retweetLoading = false;\n          draft.retweetDone = true;\n          draft.mainPosts.unshift(action.data);\n          break;\n        }\n\n      case RETWEET_FAILURE:\n        draft.retweetLoading = false;\n        draft.retweetError = action.error;\n        break;\n\n      case REMOVE_IMAGE:\n        draft.imagePaths = draft.imagePaths.filter(function (v, i) {\n          return i !== action.data;\n        });\n        break;\n\n      case UPLOAD_IMAGES_REQUEST:\n        draft.uploadImagesLoading = true;\n        draft.uploadImagesDone = false;\n        draft.uploadImagesError = null;\n        break;\n\n      case UPLOAD_IMAGES_SUCCESS:\n        {\n          draft.imagePaths = action.data;\n          draft.uploadImagesLoading = false;\n          draft.uploadImagesDone = true;\n          break;\n        }\n\n      case UPLOAD_IMAGES_FAILURE:\n        draft.uploadImagesLoading = false;\n        draft.uploadImagesError = action.error;\n        break;\n\n      case LIKE_POST_REQUEST:\n        draft.likePostLoading = true;\n        draft.likePostDone = false;\n        draft.likePostError = null;\n        break;\n\n      case LIKE_POST_SUCCESS:\n        {\n          var post = draft.mainPosts.find(function (v) {\n            return v.id === action.data.PostId;\n          });\n          post.Likers.push({\n            id: action.data.UserId\n          });\n          draft.likePostLoading = false;\n          draft.likePostDone = true;\n          break;\n        }\n\n      case LIKE_POST_FAILURE:\n        draft.likePostLoading = false;\n        draft.likePostError = action.error;\n        break;\n\n      case UNLIKE_POST_REQUEST:\n        draft.unlikePostLoading = true;\n        draft.unlikePostDone = false;\n        draft.unlikePostError = null;\n        break;\n\n      case UNLIKE_POST_SUCCESS:\n        {\n          var _post = draft.mainPosts.find(function (v) {\n            return v.id === action.data.PostId;\n          });\n\n          _post.Likers = _post.Likers.filter(function (v) {\n            return v.id !== action.data.UserId;\n          });\n          draft.unlikePostLoading = false;\n          draft.unlikePostDone = true;\n          break;\n        }\n\n      case UNLIKE_POST_FAILURE:\n        draft.unlikePostLoading = false;\n        draft.unlikePostError = action.error;\n        break;\n\n      case LOAD_POSTS_REQUEST:\n        draft.loadPostsLoading = true;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = null;\n        break;\n\n      case LOAD_POSTS_SUCCESS:\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = true;\n        draft.mainPosts = draft.mainPosts.concat(action.data);\n        draft.hasMorePosts = action.data.length === 10;\n        break;\n\n      case LOAD_POSTS_FAILURE:\n        draft.loadPostsLoading = false;\n        draft.loadPostsError = action.error;\n        break;\n\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(action.data);\n        draft.imagePaths = [];\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        draft.mainPosts = draft.mainPosts.filter(function (v) {\n          return v.id !== action.data.PostId;\n        });\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          var _post2 = draft.mainPosts.find(function (v) {\n            return v.id === action.data.PostId;\n          });\n\n          _post2.Comments.unshift(action.data);\n\n          draft.addCommentLoading = false;\n          draft.addCommentDone = true;\n          break; // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n          // const post = { ...state.mainPosts[postIndex] };\n          // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n          // const mainPosts = [...state.mainPosts];\n          // mainPosts[postIndex] = post;\n          // return {\n          //   ...state,\n          //   mainPosts,\n          //   addCommentLoading: false,\n          //   addCommentDone: true,\n          // };\n        }\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/Sang/react-nodebird/front/reducers/post.js"],"names":["produce","initialState","mainPosts","imagePaths","hasMorePosts","likePostLoading","likePostDone","likePostError","unlikePostLoading","unlikePostDone","unlikePostError","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","uploadImagesLoading","uploadImagesDone","uploadImagesError","retweetLoading","retweetDone","retweetError","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","REMOVE_IMAGE","addPost","data","type","addComment","generateDummyPost","number","Array","fill","map","id","shortId","generate","User","nickname","faker","name","findName","content","lorem","paragraph","Images","src","image","Comments","sentence","reducer","state","action","draft","unshift","error","filter","v","i","post","find","PostId","Likers","push","UserId","concat","length"],"mappings":"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","sourcesContent":["import produce from 'immer';\r\n\r\nexport const initialState = {\r\n  mainPosts: [],\r\n  imagePaths: [],\r\n  hasMorePosts: true,\r\n  likePostLoading: false,\r\n  likePostDone: false,\r\n  likePostError: null,\r\n  unlikePostLoading: false,\r\n  unlikePostDone: false,\r\n  unlikePostError: null,\r\n  loadPostsLoading: false,\r\n  loadPostsDone: false,\r\n  loadPostsError: null,\r\n  addPostLoading: false,\r\n  addPostDone: false,\r\n  addPostError: null,\r\n  removePostLoading: false,\r\n  removePostDone: false,\r\n  removePostError: null,\r\n  addCommentLoading: false,\r\n  addCommentDone: false,\r\n  addCommentError: null,\r\n  uploadImagesLoading: false,\r\n  uploadImagesDone: false,\r\n  uploadImagesError: null,\r\n  retweetLoading: false,\r\n  retweetDone: false,\r\n  retweetError: null,\r\n};\r\n\r\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\r\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\r\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\r\n\r\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\r\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\r\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\r\n\r\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\r\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\r\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\r\n\r\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\r\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\r\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const RETWEET_REQUEST = 'RETWEET_REQUEST';\r\nexport const RETWEET_SUCCESS = 'RETWEET_SUCCESS';\r\nexport const RETWEET_FAILURE = 'RETWEET_FAILURE';\r\n\r\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE';\r\n\r\nexport const addPost = (data) => ({\r\n  type: ADD_POST_REQUEST,\r\n  data,\r\n});\r\n\r\nexport const addComment = (data) => ({\r\n  type: ADD_COMMENT_REQUEST,\r\n  data,\r\n});\r\n\r\nexport const generateDummyPost = (number) => Array(number).fill().map(() => ({\r\n  id: shortId.generate(),\r\n  User: {\r\n    id: shortId.generate(),\r\n    nickname: faker.name.findName(),\r\n  },\r\n  content: faker.lorem.paragraph(),\r\n  Images: [{\r\n    src: faker.image.image(),\r\n  }],\r\n  Comments: [{\r\n    User: {\r\n      id: shortId.generate(),\r\n      nickname: faker.name.findName(),\r\n    },\r\n    content: faker.lorem.sentence(),\r\n  }],\r\n}));\r\n\r\n// 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성은 지키면서)\r\nconst reducer = (state = initialState, action) => produce(state, (draft) => {\r\n  switch (action.type) {\r\n    case RETWEET_REQUEST:\r\n      draft.retweetLoading = true;\r\n      draft.retweetDone = false;\r\n      draft.retweetError = null;\r\n      break;\r\n    case RETWEET_SUCCESS: {\r\n      draft.retweetLoading = false;\r\n      draft.retweetDone = true;\r\n      draft.mainPosts.unshift(action.data);\r\n      break;\r\n    }\r\n    case RETWEET_FAILURE:\r\n      draft.retweetLoading = false;\r\n      draft.retweetError = action.error;\r\n      break;\r\n    case REMOVE_IMAGE:\r\n      draft.imagePaths = draft.imagePaths.filter((v, i) => i !== action.data);\r\n      break;\r\n    case UPLOAD_IMAGES_REQUEST:\r\n      draft.uploadImagesLoading = true;\r\n      draft.uploadImagesDone = false;\r\n      draft.uploadImagesError = null;\r\n      break;\r\n    case UPLOAD_IMAGES_SUCCESS: {\r\n      draft.imagePaths = action.data;\r\n      draft.uploadImagesLoading = false;\r\n      draft.uploadImagesDone = true;\r\n      break;\r\n    }\r\n    case UPLOAD_IMAGES_FAILURE:\r\n      draft.uploadImagesLoading = false;\r\n      draft.uploadImagesError = action.error;\r\n      break;\r\n    case LIKE_POST_REQUEST:\r\n      draft.likePostLoading = true;\r\n      draft.likePostDone = false;\r\n      draft.likePostError = null;\r\n      break;\r\n    case LIKE_POST_SUCCESS: {\r\n      const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n      post.Likers.push({ id: action.data.UserId });\r\n      draft.likePostLoading = false;\r\n      draft.likePostDone = true;\r\n      break;\r\n    }\r\n    case LIKE_POST_FAILURE:\r\n      draft.likePostLoading = false;\r\n      draft.likePostError = action.error;\r\n      break;\r\n    case UNLIKE_POST_REQUEST:\r\n      draft.unlikePostLoading = true;\r\n      draft.unlikePostDone = false;\r\n      draft.unlikePostError = null;\r\n      break;\r\n    case UNLIKE_POST_SUCCESS: {\r\n      const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n      post.Likers = post.Likers.filter((v) => v.id !== action.data.UserId);\r\n      draft.unlikePostLoading = false;\r\n      draft.unlikePostDone = true;\r\n      break;\r\n    }\r\n    case UNLIKE_POST_FAILURE:\r\n      draft.unlikePostLoading = false;\r\n      draft.unlikePostError = action.error;\r\n      break;\r\n    case LOAD_POSTS_REQUEST:\r\n      draft.loadPostsLoading = true;\r\n      draft.loadPostsDone = false;\r\n      draft.loadPostsError = null;\r\n      break;\r\n    case LOAD_POSTS_SUCCESS:\r\n      draft.loadPostsLoading = false;\r\n      draft.loadPostsDone = true;\r\n      draft.mainPosts = draft.mainPosts.concat(action.data);\r\n      draft.hasMorePosts = action.data.length === 10;\r\n      break;\r\n    case LOAD_POSTS_FAILURE:\r\n      draft.loadPostsLoading = false;\r\n      draft.loadPostsError = action.error;\r\n      break;\r\n    case ADD_POST_REQUEST:\r\n      draft.addPostLoading = true;\r\n      draft.addPostDone = false;\r\n      draft.addPostError = null;\r\n      break;\r\n    case ADD_POST_SUCCESS:\r\n      draft.addPostLoading = false;\r\n      draft.addPostDone = true;\r\n      draft.mainPosts.unshift(action.data);\r\n      draft.imagePaths = [];\r\n      break;\r\n    case ADD_POST_FAILURE:\r\n      draft.addPostLoading = false;\r\n      draft.addPostError = action.error;\r\n      break;\r\n    case REMOVE_POST_REQUEST:\r\n      draft.removePostLoading = true;\r\n      draft.removePostDone = false;\r\n      draft.removePostError = null;\r\n      break;\r\n    case REMOVE_POST_SUCCESS:\r\n      draft.removePostLoading = false;\r\n      draft.removePostDone = true;\r\n      draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data.PostId);\r\n      break;\r\n    case REMOVE_POST_FAILURE:\r\n      draft.removePostLoading = false;\r\n      draft.removePostError = action.error;\r\n      break;\r\n    case ADD_COMMENT_REQUEST:\r\n      draft.addCommentLoading = true;\r\n      draft.addCommentDone = false;\r\n      draft.addCommentError = null;\r\n      break;\r\n    case ADD_COMMENT_SUCCESS: {\r\n      const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n      post.Comments.unshift(action.data);\r\n      draft.addCommentLoading = false;\r\n      draft.addCommentDone = true;\r\n      break;\r\n      // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\r\n      // const post = { ...state.mainPosts[postIndex] };\r\n      // post.Comments = [dummyComment(action.data.content), ...post.Comments];\r\n      // const mainPosts = [...state.mainPosts];\r\n      // mainPosts[postIndex] = post;\r\n      // return {\r\n      //   ...state,\r\n      //   mainPosts,\r\n      //   addCommentLoading: false,\r\n      //   addCommentDone: true,\r\n      // };\r\n    }\r\n    case ADD_COMMENT_FAILURE:\r\n      draft.addCommentLoading = false;\r\n      draft.addCommentError = action.error;\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n});\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}
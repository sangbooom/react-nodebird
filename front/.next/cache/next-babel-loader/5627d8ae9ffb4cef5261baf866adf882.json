{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchCommentPost),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { all, delay, fork, put, takeLatest } from \"redux-saga/effects\";\n\nfunction addPostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\n\nfunction addPost(action) {\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            type: ADD_POST_SUCCESS\n          });\n\n        case 5:\n          _context.next = 12;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 12;\n          return put({\n            type: ADD_POST_FAILURE,\n            data: _context.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction watchCommentPost() {\n  return _regeneratorRuntime.wrap(function watchCommentPost$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return all([fork(watchAddPost), fork(watchAddComment)]);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}","map":{"version":3,"sources":["C:/Users/Sang/react-nodebird/front/sagas/post.js"],"names":["addPost","watchAddPost","watchCommentPost","postSaga","all","delay","fork","put","takeLatest","addPostAPI","data","axios","post","action","type","ADD_POST_SUCCESS","console","error","ADD_POST_FAILURE","response","ADD_POST_REQUEST","watchAddComment"],"mappings":";;oDAMUA,O;qDAgBAC,Y;qDAIAC,gB;qDAIeC,Q;;AA9BzB,SAASC,GAAT,EAAcC,KAAd,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,UAAhC,QAAkD,oBAAlD;;AAEA,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AACxB,SAAOC,KAAK,CAACC,IAAN,CAAW,WAAX,EAAwBF,IAAxB,CAAP;AACD;;AAED,SAAUV,OAAV,CAAkBa,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGI,iBAAMR,KAAK,CAAC,IAAD,CAAX;;AAHJ;AAAA;AAII,iBAAME,GAAG,CAAC;AACRO,YAAAA,IAAI,EAAEC;AADE,WAAD,CAAT;;AAJJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAQIC,UAAAA,OAAO,CAACC,KAAR;AARJ;AASI,iBAAMV,GAAG,CAAC;AACRO,YAAAA,IAAI,EAAEI,gBADE;AAERR,YAAAA,IAAI,EAAE,YAAIS,QAAJ,CAAaT;AAFX,WAAD,CAAT;;AATJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBA,SAAUT,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMO,UAAU,CAACY,gBAAD,EAAmBpB,OAAnB,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUE,gBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMM,UAAU,CAACY,gBAAD,EAAmBpB,OAAnB,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUG,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMC,GAAG,CAAC,CAACE,IAAI,CAACL,YAAD,CAAL,EAAqBK,IAAI,CAACe,eAAD,CAAzB,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, delay, fork, put, takeLatest } from \"redux-saga/effects\";\r\n\r\nfunction addPostAPI(data) {\r\n  return axios.post(\"/api/post\", data);\r\n}\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    // const result = yield call(addPostAPI, action.data);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchCommentPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([fork(watchAddPost), fork(watchAddComment)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import produce from 'immer';\nimport shortId from 'shortid';\nimport faker from 'faker';\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePosts: true,\n  likePostLoading: false,\n  likePostDone: false,\n  likePostError: null,\n  unlikePostLoading: false,\n  unlikePostDone: false,\n  unlikePostError: null,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  uploadImagesLoading: false,\n  uploadImagesDone: false,\n  uploadImagesError: null,\n  retweetLoading: false,\n  retweetDone: false,\n  retweetError: null\n};\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const RETWEET_REQUEST = 'RETWEET_REQUEST';\nexport const RETWEET_SUCCESS = 'RETWEET_SUCCESS';\nexport const RETWEET_FAILURE = 'RETWEET_FAILURE';\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE';\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\nexport const generateDummyPost = number => Array(number).fill().map(() => ({\n  id: shortId.generate(),\n  User: {\n    id: shortId.generate(),\n    nickname: faker.name.findName()\n  },\n  content: faker.lorem.paragraph(),\n  Images: [{\n    src: faker.image.image()\n  }],\n  Comments: [{\n    User: {\n      id: shortId.generate(),\n      nickname: faker.name.findName()\n    },\n    content: faker.lorem.sentence()\n  }]\n})); // 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성은 지키면서)\n\nconst reducer = (state = initialState, action) => produce(state, draft => {\n  switch (action.type) {\n    case RETWEET_REQUEST:\n      draft.retweetLoading = true;\n      draft.retweetDone = false;\n      draft.retweetError = null;\n      break;\n\n    case RETWEET_SUCCESS:\n      {\n        draft.retweetLoading = false;\n        draft.retweetDone = true;\n        draft.mainPosts.unshift(action.data);\n        break;\n      }\n\n    case RETWEET_FAILURE:\n      draft.retweetLoading = false;\n      draft.retweetError = action.error;\n      break;\n\n    case REMOVE_IMAGE:\n      draft.imagePaths = draft.imagePaths.filter((v, i) => i !== action.data);\n      break;\n\n    case UPLOAD_IMAGES_REQUEST:\n      draft.uploadImagesLoading = true;\n      draft.uploadImagesDone = false;\n      draft.uploadImagesError = null;\n      break;\n\n    case UPLOAD_IMAGES_SUCCESS:\n      {\n        draft.imagePaths = action.data;\n        draft.uploadImagesLoading = false;\n        draft.uploadImagesDone = true;\n        break;\n      }\n\n    case UPLOAD_IMAGES_FAILURE:\n      draft.uploadImagesLoading = false;\n      draft.uploadImagesError = action.error;\n      break;\n\n    case LIKE_POST_REQUEST:\n      draft.likePostLoading = true;\n      draft.likePostDone = false;\n      draft.likePostError = null;\n      break;\n\n    case LIKE_POST_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.Likers.push({\n          id: action.data.UserId\n        });\n        draft.likePostLoading = false;\n        draft.likePostDone = true;\n        break;\n      }\n\n    case LIKE_POST_FAILURE:\n      draft.likePostLoading = false;\n      draft.likePostError = action.error;\n      break;\n\n    case UNLIKE_POST_REQUEST:\n      draft.unlikePostLoading = true;\n      draft.unlikePostDone = false;\n      draft.unlikePostError = null;\n      break;\n\n    case UNLIKE_POST_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.Likers = post.Likers.filter(v => v.id !== action.data.UserId);\n        draft.unlikePostLoading = false;\n        draft.unlikePostDone = true;\n        break;\n      }\n\n    case UNLIKE_POST_FAILURE:\n      draft.unlikePostLoading = false;\n      draft.unlikePostError = action.error;\n      break;\n\n    case LOAD_POSTS_REQUEST:\n      draft.loadPostsLoading = true;\n      draft.loadPostsDone = false;\n      draft.loadPostsError = null;\n      break;\n\n    case LOAD_POSTS_SUCCESS:\n      draft.loadPostsLoading = false;\n      draft.loadPostsDone = true;\n      draft.mainPosts = action.data.concat(draft.mainPosts);\n      draft.hasMorePosts = action.mainPosts.length < 50;\n      break;\n\n    case LOAD_POSTS_FAILURE:\n      draft.loadPostsLoading = false;\n      draft.loadPostsError = action.error;\n      break;\n\n    case ADD_POST_REQUEST:\n      draft.addPostLoading = true;\n      draft.addPostDone = false;\n      draft.addPostError = null;\n      break;\n\n    case ADD_POST_SUCCESS:\n      draft.addPostLoading = false;\n      draft.addPostDone = true;\n      draft.mainPosts.unshift(action.data);\n      draft.imagePaths = [];\n      break;\n\n    case ADD_POST_FAILURE:\n      draft.addPostLoading = false;\n      draft.addPostError = action.error;\n      break;\n\n    case REMOVE_POST_REQUEST:\n      draft.removePostLoading = true;\n      draft.removePostDone = false;\n      draft.removePostError = null;\n      break;\n\n    case REMOVE_POST_SUCCESS:\n      draft.removePostLoading = false;\n      draft.removePostDone = true;\n      draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data.PostId);\n      break;\n\n    case REMOVE_POST_FAILURE:\n      draft.removePostLoading = false;\n      draft.removePostError = action.error;\n      break;\n\n    case ADD_COMMENT_REQUEST:\n      draft.addCommentLoading = true;\n      draft.addCommentDone = false;\n      draft.addCommentError = null;\n      break;\n\n    case ADD_COMMENT_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.Comments.unshift(action.data);\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        break; // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n        // const post = { ...state.mainPosts[postIndex] };\n        // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n        // const mainPosts = [...state.mainPosts];\n        // mainPosts[postIndex] = post;\n        // return {\n        //   ...state,\n        //   mainPosts,\n        //   addCommentLoading: false,\n        //   addCommentDone: true,\n        // };\n      }\n\n    case ADD_COMMENT_FAILURE:\n      draft.addCommentLoading = false;\n      draft.addCommentError = action.error;\n      break;\n\n    default:\n      break;\n  }\n});\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/Sang/react-nodebird/front/reducers/post.js"],"names":["produce","shortId","faker","initialState","mainPosts","imagePaths","hasMorePosts","likePostLoading","likePostDone","likePostError","unlikePostLoading","unlikePostDone","unlikePostError","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","uploadImagesLoading","uploadImagesDone","uploadImagesError","retweetLoading","retweetDone","retweetError","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","REMOVE_IMAGE","addPost","data","type","addComment","generateDummyPost","number","Array","fill","map","id","generate","User","nickname","name","findName","content","lorem","paragraph","Images","src","image","Comments","sentence","reducer","state","action","draft","unshift","error","filter","v","i","post","find","PostId","Likers","push","UserId","concat","length"],"mappings":"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","sourcesContent":["import produce from 'immer';\r\nimport shortId from 'shortid';\r\nimport faker from 'faker';\r\n\r\nexport const initialState = {\r\n  mainPosts: [],\r\n  imagePaths: [],\r\n  hasMorePosts: true,\r\n  likePostLoading: false,\r\n  likePostDone: false,\r\n  likePostError: null,\r\n  unlikePostLoading: false,\r\n  unlikePostDone: false,\r\n  unlikePostError: null,\r\n  loadPostsLoading: false,\r\n  loadPostsDone: false,\r\n  loadPostsError: null,\r\n  addPostLoading: false,\r\n  addPostDone: false,\r\n  addPostError: null,\r\n  removePostLoading: false,\r\n  removePostDone: false,\r\n  removePostError: null,\r\n  addCommentLoading: false,\r\n  addCommentDone: false,\r\n  addCommentError: null,\r\n  uploadImagesLoading: false,\r\n  uploadImagesDone: false,\r\n  uploadImagesError: null,\r\n  retweetLoading: false,\r\n  retweetDone: false,\r\n  retweetError: null,\r\n};\r\n\r\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\r\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\r\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\r\n\r\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\r\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\r\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\r\n\r\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\r\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\r\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\r\n\r\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\r\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\r\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const RETWEET_REQUEST = 'RETWEET_REQUEST';\r\nexport const RETWEET_SUCCESS = 'RETWEET_SUCCESS';\r\nexport const RETWEET_FAILURE = 'RETWEET_FAILURE';\r\n\r\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE';\r\n\r\nexport const addPost = (data) => ({\r\n  type: ADD_POST_REQUEST,\r\n  data,\r\n});\r\n\r\nexport const addComment = (data) => ({\r\n  type: ADD_COMMENT_REQUEST,\r\n  data,\r\n});\r\n\r\nexport const generateDummyPost = (number) => Array(number).fill().map(() => ({\r\n  id: shortId.generate(),\r\n  User: {\r\n    id: shortId.generate(),\r\n    nickname: faker.name.findName(),\r\n  },\r\n  content: faker.lorem.paragraph(),\r\n  Images: [{\r\n    src: faker.image.image(),\r\n  }],\r\n  Comments: [{\r\n    User: {\r\n      id: shortId.generate(),\r\n      nickname: faker.name.findName(),\r\n    },\r\n    content: faker.lorem.sentence(),\r\n  }],\r\n}));\r\n\r\n// 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성은 지키면서)\r\nconst reducer = (state = initialState, action) => produce(state, (draft) => {\r\n  switch (action.type) {\r\n    case RETWEET_REQUEST:\r\n      draft.retweetLoading = true;\r\n      draft.retweetDone = false;\r\n      draft.retweetError = null;\r\n      break;\r\n    case RETWEET_SUCCESS: {\r\n      draft.retweetLoading = false;\r\n      draft.retweetDone = true;\r\n      draft.mainPosts.unshift(action.data);\r\n      break;\r\n    }\r\n    case RETWEET_FAILURE:\r\n      draft.retweetLoading = false;\r\n      draft.retweetError = action.error;\r\n      break;\r\n    case REMOVE_IMAGE:\r\n      draft.imagePaths = draft.imagePaths.filter((v, i) => i !== action.data);\r\n      break;\r\n    case UPLOAD_IMAGES_REQUEST:\r\n      draft.uploadImagesLoading = true;\r\n      draft.uploadImagesDone = false;\r\n      draft.uploadImagesError = null;\r\n      break;\r\n    case UPLOAD_IMAGES_SUCCESS: {\r\n      draft.imagePaths = action.data;\r\n      draft.uploadImagesLoading = false;\r\n      draft.uploadImagesDone = true;\r\n      break;\r\n    }\r\n    case UPLOAD_IMAGES_FAILURE:\r\n      draft.uploadImagesLoading = false;\r\n      draft.uploadImagesError = action.error;\r\n      break;\r\n    case LIKE_POST_REQUEST:\r\n      draft.likePostLoading = true;\r\n      draft.likePostDone = false;\r\n      draft.likePostError = null;\r\n      break;\r\n    case LIKE_POST_SUCCESS: {\r\n      const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n      post.Likers.push({ id: action.data.UserId });\r\n      draft.likePostLoading = false;\r\n      draft.likePostDone = true;\r\n      break;\r\n    }\r\n    case LIKE_POST_FAILURE:\r\n      draft.likePostLoading = false;\r\n      draft.likePostError = action.error;\r\n      break;\r\n    case UNLIKE_POST_REQUEST:\r\n      draft.unlikePostLoading = true;\r\n      draft.unlikePostDone = false;\r\n      draft.unlikePostError = null;\r\n      break;\r\n    case UNLIKE_POST_SUCCESS: {\r\n      const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n      post.Likers = post.Likers.filter((v) => v.id !== action.data.UserId);\r\n      draft.unlikePostLoading = false;\r\n      draft.unlikePostDone = true;\r\n      break;\r\n    }\r\n    case UNLIKE_POST_FAILURE:\r\n      draft.unlikePostLoading = false;\r\n      draft.unlikePostError = action.error;\r\n      break;\r\n    case LOAD_POSTS_REQUEST:\r\n      draft.loadPostsLoading = true;\r\n      draft.loadPostsDone = false;\r\n      draft.loadPostsError = null;\r\n      break;\r\n    case LOAD_POSTS_SUCCESS:\r\n      draft.loadPostsLoading = false;\r\n      draft.loadPostsDone = true;\r\n      draft.mainPosts = action.data.concat(draft.mainPosts);\r\n      draft.hasMorePosts = action.mainPosts.length < 50;\r\n      break;\r\n    case LOAD_POSTS_FAILURE:\r\n      draft.loadPostsLoading = false;\r\n      draft.loadPostsError = action.error;\r\n      break;\r\n    case ADD_POST_REQUEST:\r\n      draft.addPostLoading = true;\r\n      draft.addPostDone = false;\r\n      draft.addPostError = null;\r\n      break;\r\n    case ADD_POST_SUCCESS:\r\n      draft.addPostLoading = false;\r\n      draft.addPostDone = true;\r\n      draft.mainPosts.unshift(action.data);\r\n      draft.imagePaths = [];\r\n      break;\r\n    case ADD_POST_FAILURE:\r\n      draft.addPostLoading = false;\r\n      draft.addPostError = action.error;\r\n      break;\r\n    case REMOVE_POST_REQUEST:\r\n      draft.removePostLoading = true;\r\n      draft.removePostDone = false;\r\n      draft.removePostError = null;\r\n      break;\r\n    case REMOVE_POST_SUCCESS:\r\n      draft.removePostLoading = false;\r\n      draft.removePostDone = true;\r\n      draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data.PostId);\r\n      break;\r\n    case REMOVE_POST_FAILURE:\r\n      draft.removePostLoading = false;\r\n      draft.removePostError = action.error;\r\n      break;\r\n    case ADD_COMMENT_REQUEST:\r\n      draft.addCommentLoading = true;\r\n      draft.addCommentDone = false;\r\n      draft.addCommentError = null;\r\n      break;\r\n    case ADD_COMMENT_SUCCESS: {\r\n      const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n      post.Comments.unshift(action.data);\r\n      draft.addCommentLoading = false;\r\n      draft.addCommentDone = true;\r\n      break;\r\n      // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\r\n      // const post = { ...state.mainPosts[postIndex] };\r\n      // post.Comments = [dummyComment(action.data.content), ...post.Comments];\r\n      // const mainPosts = [...state.mainPosts];\r\n      // mainPosts[postIndex] = post;\r\n      // return {\r\n      //   ...state,\r\n      //   mainPosts,\r\n      //   addCommentLoading: false,\r\n      //   addCommentDone: true,\r\n      // };\r\n    }\r\n    case ADD_COMMENT_FAILURE:\r\n      draft.addCommentLoading = false;\r\n      draft.addCommentError = action.error;\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n});\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}